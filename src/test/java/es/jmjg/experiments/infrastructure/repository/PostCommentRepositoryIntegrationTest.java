package es.jmjg.experiments.infrastructure.repository;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.junit.jupiter.api.Assertions.assertEquals;

import es.jmjg.experiments.domain.post.entity.Post;
import es.jmjg.experiments.domain.post.entity.PostComment;
import es.jmjg.experiments.domain.user.entity.User;
import es.jmjg.experiments.infrastructure.repository.jpa.PostCommentRepositoryImpl;
import es.jmjg.experiments.shared.BaseJpaIntegration;
import es.jmjg.experiments.shared.TestDataSamples;
import jakarta.validation.ConstraintViolationException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Import;

@Import({ PostRepositoryImpl.class, UserRepositoryImpl.class, PostCommentRepositoryImpl.class })
public class PostCommentRepositoryIntegrationTest extends BaseJpaIntegration {

  @Autowired
  private PostRepositoryImpl postRepository;

  @Autowired
  private UserRepositoryImpl userRepository;

  @Autowired
  private PostCommentRepositoryImpl postCommentRepository;

  @Test
  void whenPostCommentIsCreated_thenCreatedAtIsAutoGenerated() {
    UUID uuid = UUID.randomUUID();

    PostComment postComment = new PostComment();
    postComment.setUuid(uuid);
    postComment.setComment("This is a test comment");
    postComment.setPost(postRepository.findByUuid(TestDataSamples.POST_1_UUID).orElseThrow());
    postComment.setUser(userRepository.findByUuid(TestDataSamples.LEANNE_UUID).orElseThrow());
    postCommentRepository.save(postComment);

    LocalDateTime createdAt = postComment.getCreatedAt();
    assertThat(createdAt).isNotNull();
    assertEquals(LocalDate.now(), createdAt.toLocalDate());

    PostComment savedPostComment = postCommentRepository.findByUuid(uuid).orElseThrow();
    assertThat(savedPostComment.getCreatedAt()).isNotNull();
    assertEquals(createdAt, savedPostComment.getCreatedAt());
  }

  @Test
  void whenPostCommentIsCreated_thenPostIsLinked() {
    PostComment postComment = new PostComment();
    postComment.setUuid(UUID.randomUUID());
    postComment.setComment("This is a test comment");
    postComment.setPost(postRepository.findByUuid(TestDataSamples.POST_1_UUID).orElseThrow());
    postComment.setUser(userRepository.findByUuid(TestDataSamples.LEANNE_UUID).orElseThrow());
    postCommentRepository.save(postComment);

    Post post = postRepository.findByUuid(TestDataSamples.POST_1_UUID).orElseThrow();
    assertThat(post.getComments()).contains(postComment);
  }

  @Test
  void whenPostCommentIsCreated_thenUserIsLinked() {
    PostComment postComment = new PostComment();
    postComment.setUuid(UUID.randomUUID());
    postComment.setComment("This is a test comment");
    postComment.setPost(postRepository.findByUuid(TestDataSamples.POST_1_UUID).orElseThrow());
    postComment.setUser(userRepository.findByUuid(TestDataSamples.LEANNE_UUID).orElseThrow());
    postCommentRepository.save(postComment);

    User user = userRepository.findByUuid(TestDataSamples.LEANNE_UUID).orElseThrow();
    assertThat(user.getComments()).contains(postComment);
  }

  @Test
  void whenPostCommentIsEmtpy_thenThrowConstraintViolationException() {
    UUID uuid = UUID.randomUUID();

    PostComment postComment = new PostComment();
    postComment.setUuid(uuid);
    postComment.setComment("");
    postComment.setPost(postRepository.findByUuid(TestDataSamples.POST_1_UUID).orElseThrow());
    postComment.setUser(userRepository.findByUuid(TestDataSamples.LEANNE_UUID).orElseThrow());
    assertThatThrownBy(() -> postCommentRepository.save(postComment))
        .isInstanceOf(ConstraintViolationException.class)
        .satisfies(ex -> {
          ConstraintViolationException cve = (ConstraintViolationException) ex;
          assertThat(cve.getConstraintViolations()).hasSize(1);
          assertThat(cve.getConstraintViolations().iterator().next().getPropertyPath().toString()).isEqualTo("comment");
        });
  }
}
